# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/001_relative_positional_encoding.ipynb.

# %% auto 0
__all__ = ['shift_right']

# %% ../../../nbs/001_relative_positional_encoding.ipynb 25
import torch
import torch.nn.functional as F

def shift_right(QEr: torch.Tensor):
    """
    This method shifts $i^{th}$ row of a matrix by $i$ columns.
    If the input is `[[1, 2 ,3], [4, 5 ,6], [7, 8, 9]]`, the shifted
    result would be `[[1, 2 ,3], [0, 4, 5], [6, 0, 7]]`.
    *Ideally we should mask out the lower triangle but it's ok for our purpose*.
    """

    seq_len, e_len = QEr.shape
    padded = F.pad(QEr, (0, 1))
    
    padded = padded.view(e_len + 1, seq_len)
    # Reshape and remove excess elements from the end
    return padded[:-1].view_as(QEr)[:,-seq_len:]
