# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/ml/',
                'doc_host': 'https://blackcherry88.github.io',
                'git_url': 'https://github.com/blackcherry88/ml/tree/master/',
                'lib_path': 'ml'},
  'syms': { 'ml.langchain.example': { 'ml.langchain.example.HfInference': ('langchain.html#hfinference', 'ml/langchain/example.py'),
                                      'ml.langchain.example.HfInference.Config': ( 'langchain.html#hfinference.config',
                                                                                   'ml/langchain/example.py'),
                                      'ml.langchain.example.HfInference._call': ( 'langchain.html#hfinference._call',
                                                                                  'ml/langchain/example.py'),
                                      'ml.langchain.example.HfInference._llm_type': ( 'langchain.html#hfinference._llm_type',
                                                                                      'ml/langchain/example.py'),
                                      'ml.langchain.example.HfInference.validate_environment': ( 'langchain.html#hfinference.validate_environment',
                                                                                                 'ml/langchain/example.py')},
            'ml.langchain.huggingface': { 'ml.langchain.huggingface.HfInference': ( 'langchain.html#hfinference',
                                                                                    'ml/langchain/huggingface.py'),
                                          'ml.langchain.huggingface.HfInference.Config': ( 'langchain.html#hfinference.config',
                                                                                           'ml/langchain/huggingface.py'),
                                          'ml.langchain.huggingface.HfInference._call': ( 'langchain.html#hfinference._call',
                                                                                          'ml/langchain/huggingface.py'),
                                          'ml.langchain.huggingface.HfInference._llm_type': ( 'langchain.html#hfinference._llm_type',
                                                                                              'ml/langchain/huggingface.py'),
                                          'ml.langchain.huggingface.HfInference.validate_environment': ( 'langchain.html#hfinference.validate_environment',
                                                                                                         'ml/langchain/huggingface.py')},
            'ml.optimization.bfgs': { 'ml.optimization.bfgs.bfgs': ('optimization.bfgs.html#bfgs', 'ml/optimization/bfgs.py'),
                                      'ml.optimization.bfgs.line_search': ( 'optimization.bfgs.html#line_search',
                                                                            'ml/optimization/bfgs.py')},
            'ml.optimization.grad': {'ml.optimization.grad.naive_grad': ('optimization.grad.html#naive_grad', 'ml/optimization/grad.py')},
            'ml.optimization.himmelblau': { 'ml.optimization.himmelblau.grad_himmelblau': ( 'optimization.himmelblau.html#grad_himmelblau',
                                                                                            'ml/optimization/himmelblau.py'),
                                            'ml.optimization.himmelblau.hess_himmelblau': ( 'optimization.himmelblau.html#hess_himmelblau',
                                                                                            'ml/optimization/himmelblau.py'),
                                            'ml.optimization.himmelblau.himmelblau': ( 'optimization.himmelblau.html#himmelblau',
                                                                                       'ml/optimization/himmelblau.py')},
            'ml.plots.util': { 'ml.plots.util.show_images': ('plot_utils.html#show_images', 'ml/plots/util.py'),
                               'ml.plots.util.show_matrixes_as_images': ('plot_utils.html#show_matrixes_as_images', 'ml/plots/util.py')},
            'ml.sampling.box_muller': {'ml.sampling.box_muller.sample': ('sampling.box_muller.html#sample', 'ml/sampling/box_muller.py')},
            'ml.transform.util.relative_2d_positional': { 'ml.transform.util.relative_2d_positional.get_2d_relative_coord': ( 'relative_positional_2d_swin.html#get_2d_relative_coord',
                                                                                                                              'ml/transform/util/relative_2d_positional.py')},
            'ml.transform.util.relative_positional': { 'ml.transform.util.relative_positional.shift_right': ( 'relative_positional_encoding.html#shift_right',
                                                                                                              'ml/transform/util/relative_positional.py')},
            'ml.tree.cart': { 'ml.tree.cart.TreeNode': ('tree.cart.html#treenode', 'ml/tree/cart.py'),
                              'ml.tree.cart.TreeNode.__init__': ('tree.cart.html#treenode.__init__', 'ml/tree/cart.py'),
                              'ml.tree.cart.cart': ('tree.cart.html#cart', 'ml/tree/cart.py'),
                              'ml.tree.cart.cart_helper': ('tree.cart.html#cart_helper', 'ml/tree/cart.py'),
                              'ml.tree.cart.eval_forest': ('tree.cart.html#eval_forest', 'ml/tree/cart.py'),
                              'ml.tree.cart.eval_helper': ('tree.cart.html#eval_helper', 'ml/tree/cart.py'),
                              'ml.tree.cart.eval_tree': ('tree.cart.html#eval_tree', 'ml/tree/cart.py'),
                              'ml.tree.cart.forest': ('tree.cart.html#forest', 'ml/tree/cart.py'),
                              'ml.tree.cart.sqsplit': ('tree.cart.html#sqsplit', 'ml/tree/cart.py'),
                              'ml.tree.cart.sqsplit_helper': ('tree.cart.html#sqsplit_helper', 'ml/tree/cart.py')},
            'ml.util.set_seed': {'ml.util.set_seed.vis_act_fn': ('plot_grads.html#vis_act_fn', 'ml/util/set_seed.py')}}}
